package maze;

import org.junit.Test;

import static maze.ExampleMazes.LS;
import static maze.MazeTest.path;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

public class ExtMazeTests {
    public static final int MAZE_HEIGHT = 20;
    public static final int MAZE_WIDTH = 20;
    public static final int[] MAZE_DET = {7, 0, 2, 2, 5, 4, 2, 1, 2, 6, 0, 1, 3, 18, 4, 11, 4, 5, 4, 1, 22, 13, 12, 20,
                                          15, 29, 1, 21, 13, 22, 2, 35, 16, 30, 43, 35, 36, 23, 10, 48, 46, 10, 26, 26,
                                          8, 11, 14, 18, 2, 31, 31, 35, 56, 16, 50, 25, 55, 35, 17, 54, 24, 47, 23, 7,
                                          38, 40, 48, 55, 38, 1, 3, 31, 9, 46, 25, 4, 4, 5, 15, 30, 1, 59, 63, 12, 57,
                                          32, 8, 58, 21, 30, 62, 62, 30, 11, 38, 8, 50, 41, 44, 48, 15, 64, 52, 36, 34,
                                          47, 26, 32, 64, 65, 9, 2, 28, 88, 11, 0, 16, 80, 11, 42, 34, 74, 26, 21, 68,
                                          37, 11, 63, 75, 21, 78, 46, 92, 63, 11, 16, 30, 51, 0, 22, 22, 73, 35, 83, 17,
                                          16, 1, 82, 43, 34, 4, 89, 68, 4, 59, 48, 16, 0, 99, 14, 42, 84, 39, 27, 59,
                                          87, 46, 104, 78, 59, 34, 46, 37, 2, 57, 71, 69, 15, 59, 40, 29, 86, 42, 14,
                                          46, 0, 58, 80, 77, 79, 1, 25, 5, 97, 63, 26, 101, 69, 96, 101, 51, 74, 95, 70,
                                          101, 46, 111, 1, 54, 70, 42, 31, 4, 50, 65, 92, 101, 72, 82, 43, 5, 41, 69,
                                          65, 16, 86, 22, 27, 90, 0, 57, 69, 55, 7, 52, 103, 60, 61, 54, 80, 87, 4, 69,
                                          48, 113, 45, 78, 95, 14, 58, 1, 65, 76, 87, 15, 28, 74, 35, 40, 73, 39, 13,
                                          10, 30, 52, 14, 105, 87, 66, 59, 5, 43, 46, 21, 10, 88, 84, 25, 99, 44, 75,
                                          108, 89, 112, 100, 19, 32, 116, 57, 44, 21, 124, 53, 74, 50, 38, 103, 81, 13,
                                          40, 43, 104, 73, 119, 118, 65, 127, 79, 85, 8, 94, 37, 102, 80, 127, 104, 25,
                                          120, 111, 142, 119, 141, 139, 98, 148, 59, 113, 108, 148, 58, 58, 52, 131,
                                          105, 72, 128, 112, 145, 149, 23, 52, 94, 47, 133, 132, 152, 91, 30, 65, 1, 48,
                                          8, 165, 113, 53, 29, 46, 137, 92, 102, 169, 30, 62, 50, 76, 2, 128, 130, 13,
                                          56, 144, 109, 117, 131, 132, 156, 60, 161, 44, 36, 161, 107, 36, 91, 39, 91,
                                          65, 8, 95, 27, 61, 126, 131, 134, 82, 112, 47, 107, 28, 141, 92, 91, 19, 77,
                                          16, 21, 111, 56, 1, 58, 12, 56, 119, 144, 42, 10, 130, 83, 53, 99, 159, 14,
                                          146, 51, 38, 149, 46, 120, 62, 138, 157, 46, 104, 28, 71, 24, 85, 92, 143, 31,
                                          52, 53, 85, 28, 92, 87, 162, 79, 170, 91, 11, 86, 166, 144, 83, 71, 47, 104,
                                          169, 96, 142, 21, 110, 59, 144, 100, 48, 46, 40, 28, 109, 40, 15, 149, 20,
                                          156, 120, 23, 164, 79, 139, 165, 72, 145, 96, 132, 118, 91, 153, 124, 117,
                                          104, 93, 154, 103, 155, 124, 100, 122, 177, 115, 103, 64, 109, 188, 98, 92,
                                          29, 81, 42, 45, 12, 6, 57, 80, 181, 186, 182, 45, 45, 151, 164, 140, 96, 23,
                                          1, 128, 96, 121, 179, 1, 40, 42, 165, 152, 114, 120, 6, 187, 152, 170, 102,
                                          16, 125, 39, 5, 110, 166, 83, 149, 171, 52, 6, 164, 162, 81, 33, 164, 118, 68,
                                          33, 109, 176, 39, 23, 67, 101, 129, 2, 158, 139, 143, 31, 14, 25, 146, 26,
                                          101, 88, 2, 89, 49, 129, 88, 111, 61, 85, 151, 15, 9, 168, 13, 9, 4, 165, 66,
                                          129, 146, 172, 21, 25, 55, 121, 46, 57, 46, 121, 52, 144, 96, 12, 74, 21, 9,
                                          86, 169, 41, 130, 144, 120, 108, 92, 54, 82, 165, 62, 130, 24, 158, 15, 3, 47,
                                          45, 133, 61, 3, 37, 162, 15, 69, 126, 85, 51, 155, 58, 18, 82, 57, 5, 73, 46,
                                          119, 109, 129, 120, 29, 132, 19, 91, 133, 35, 33, 37, 86, 157, 124, 31, 114,
                                          51, 86, 75, 124, 23, 120, 168, 118, 20, 50, 97, 86, 102, 171, 108, 99, 124,
                                          103, 47, 128, 40, 104, 150, 134, 134, 86, 91, 170, 148, 47, 6, 119, 155, 58,
                                          21, 11, 144, 128, 61, 25, 134, 99, 24, 127, 161, 86, 142, 131, 125, 151, 106,
                                          138, 152, 156, 17, 121, 126, 58, 55, 71, 11, 124, 3, 154, 169, 101, 34, 100,
                                          157, 40, 44, 163, 6, 167, 161, 42, 99, 131, 39, 120, 112, 62, 169, 29, 110,
                                          132, 45, 51, 21, 48, 124, 27, 180, 58, 50, 128, 27, 108, 1, 17, 13, 41, 102,
                                          99, 46, 122, 71, 156, 13, 94, 44, 11, 57, 79, 21, 122, 39, 40, 162, 38, 115,
                                          2, 78, 95, 45, 125, 55, 130, 87, 15, 26, 160, 170, 61, 135, 162, 8, 81, 75,
                                          159, 8, 58, 34, 82, 146, 82, 9, 58, 104, 146, 120, 79, 18, 22, 14, 68, 117,
                                          170, 105, 83, 151, 130, 174, 120, 145, 114, 94, 44, 24, 144, 143, 135, 162,
                                          167, 98, 77, 39, 84, 49, 93, 34, 75, 34, 87, 89, 129, 126, 130, 112, 35, 34,
                                          11, 37, 117, 115, 140, 188, 163, 53, 169, 52, 123, 106, 172, 96, 56, 179, 188,
                                          46, 52, 73, 49, 92, 154, 150, 10, 113, 57, 49, 41, 72, 193, 96, 191, 155, 180,
                                          63, 124, 122, 150, 150, 120, 146, 152, 176, 42, 22, 56, 96, 83, 55, 148, 18,
                                          130, 205, 179, 90, 195, 72, 143, 140, 93, 103, 86, 151, 166, 169, 92, 198, 88,
                                          57, 183, 22, 56, 152, 124, 1, 113, 25, 53, 20, 14, 105, 82, 151, 188, 170,
                                          101, 119, 191, 208, 57, 113, 25, 199, 50, 117, 25, 121, 19, 178, 14, 28, 39,
                                          0, 145, 172, 179, 142, 62, 115, 108, 56, 164, 73, 69, 80, 127, 164, 24, 172,
                                          176, 12, 58, 155, 71, 131, 111, 68, 89, 8, 90, 33, 164, 65, 115, 86, 134, 108,
                                          18, 158, 149, 73, 37, 140, 10, 53, 91, 110, 71, 164, 91, 130, 143, 17, 152,
                                          122, 80, 93, 13, 18, 165, 22, 93, 115, 69, 51, 78, 90, 8, 130, 11, 18, 105,
                                          132, 13, 59, 143, 64, 130, 140, 68, 4, 5, 150, 64, 111, 145, 118, 157, 121,
                                          109, 29, 159, 78, 160, 150, 166, 71, 68, 25, 160, 2, 47, 112, 17, 11, 109,
                                          155, 26, 80, 40, 6, 22, 133, 133, 162, 39, 35, 29, 132, 86, 22, 46, 97, 68,
                                          164, 55, 144, 30, 120, 153, 119, 41, 32, 135, 70, 129, 49, 36, 42, 3, 123, 59,
                                          88, 21, 155, 36, 66, 58, 34, 42, 3, 102, 50, 151, 88, 14, 107, 84, 56, 144,
                                          81, 26, 76, 10, 39, 121, 0, 59, 29, 23, 125, 118, 94, 32, 79, 147, 145, 15,
                                          60, 107, 86, 133, 68, 87, 94, 86, 96, 145, 59, 91, 130, 79, 51, 95, 3, 53, 39,
                                          17, 148, 18, 150, 154, 159, 77, 3, 160, 6, 30, 117, 4, 122, 147, 96, 7, 65,
                                          39, 84, 32, 106, 73, 144, 36, 99, 48, 41, 152, 81, 133, 5, 136, 144, 49, 105,
                                          36, 6, 125, 77, 141, 149, 19, 138, 12, 41, 100, 98, 62, 32, 7, 17, 48, 18, 89,
                                          78, 23, 98, 72, 124, 107, 14, 45, 119, 51, 31, 46, 131, 107, 152, 132, 174,
                                          166, 5, 34, 52, 147, 157, 9, 43, 7, 125, 63, 143, 100, 0, 133, 111, 103, 163,
                                          165, 61, 2, 106, 166, 2, 121, 105, 164, 91, 163, 18, 9, 134, 18, 92, 89, 11,
                                          156, 26, 52, 47, 6, 2, 44, 17, 79, 123, 61, 71, 16, 134, 148, 49, 45, 116,
                                          102, 58, 76, 179, 137, 126, 27, 68, 49, 73, 60, 125, 78, 132, 139, 135, 134,
                                          81, 1, 153, 77, 36, 156, 137, 76, 8, 76, 60, 105, 27, 33, 94, 92, 5, 122, 76,
                                          152, 166, 17, 150, 7, 23, 68, 85, 61, 163, 118, 13, 98, 7, 64, 149, 111, 89,
                                          113, 104, 154, 78, 2, 20, 92, 65, 110, 38, 126, 125, 62, 100, 152, 24, 94, 11,
                                          21, 44, 78, 130, 40, 106, 125, 48, 130, 15, 84, 78, 1, 101, 21, 96, 117, 5,
                                          72, 46, 60, 14, 142, 141, 50, 126, 78, 24, 128, 82, 84, 88, 109, 66, 138, 126,
                                          76, 42, 135, 132, 28, 125, 96, 65, 8, 95, 132, 131, 59, 27, 84, 87, 99, 80,
                                          35, 2, 21, 6, 76, 14, 89, 99, 66, 25, 131, 129, 0, 128, 31, 16, 99, 128, 80,
                                          117, 121, 14, 45, 94, 104, 68, 121, 16, 15, 4, 85, 66, 47, 7, 85, 3, 12, 16,
                                          10, 3, 35, 18, 57, 38, 11, 13, 110, 82, 93, 54, 113, 3, 70, 70, 84, 43, 18,
                                          53, 16, 102, 37, 47, 21, 52, 51, 6, 58, 27, 64, 22, 94, 35, 55, 86, 17, 43,
                                          58, 43, 84, 64, 16, 16, 53, 47, 81, 52, 86, 67, 84, 1, 66, 58, 24, 38, 30, 15,
                                          50, 40, 18, 0, 57, 46, 20, 20, 52, 51, 65, 69, 72, 53, 3, 49, 15, 67, 50, 1,
                                          8, 40, 49, 51, 2, 32, 39, 38, 39, 38, 38, 48, 20, 33, 42, 10, 10, 54, 37, 39,
                                          8, 43, 35, 22, 41, 31, 32, 15, 33, 18, 5, 43, 41, 9, 16, 38, 15, 6, 29, 25,
                                          13, 20, 10, 2, 28, 4, 12, 13, 8, 21, 14, 20, 21, 11, 21, 3, 19, 14, 12, 8, 6,
                                          10, 11, 8, 7, 0, 5, 6, 7, 6, 0, 3, 4, 3, 0, 0, 0};

    public static final String MAZE = "#########################################" + LS +
                                      "#+ + +#+ + + + + + + +#+#+ + + +#+#+#+ +#" + LS +
                                      "##### ####### ### # # # # ##### # # # ###" + LS +
                                      "#+#+ +#+ + +#+ +#+#+#+ + + +#+#+ + +#+#+#" + LS +
                                      "# ### ### ### ##### ### # # # ### # # # #" + LS +
                                      "#+#+#+ +#+#+ + + +#+#+#+#+#+ + +#+#+#+ +#" + LS +
                                      "# # # ### ### # ##### ####### # ### # ###" + LS +
                                      "#+#+ +#+ +#+ +#+#+#+ + + + +#+#+#+#+ + +#" + LS +
                                      "# ### # ##### ### ### ##### ##### # # ###" + LS +
                                      "#+#+ +#+ + + +#+#+#+#+ + +#+ +#+ + +#+ +#" + LS +
                                      "# ### # # # ### # # # ### ##### # ### # #" + LS +
                                      "#+ +#+ +#+#+ +#+#+ + +#+#+ + +#+#+#+ +#+#" + LS +
                                      "# ##### ####### # ##### # # ########### #" + LS +
                                      "#+#+ +#+#+ +#+#+ + + + +#+#+ + +#+#+ +#+#" + LS +
                                      "# # ### # ### # # # ####### ##### ### ###" + LS +
                                      "#+ + + + + + + +#+#+ + +#+#+ + +#+ + + +#" + LS +
                                      "# # # # # ### # ### ##### ### # # ### ###" + LS +
                                      "#+#+#+#+#+ +#+#+ +#+ + + + +#+#+#+#+#+#+#" + LS +
                                      "# ### ### ### # ########### ####### # # #" + LS +
                                      "#+ +#+#+#+ +#+#+#+#+ + + +#+ +#+ + + + +#" + LS +
                                      "# ##### # # ### # # ########### # ##### #" + LS +
                                      "#+ + + +#+#+#+ + +#+#+ + + + +#+#+ + +#+#" + LS +
                                      "# ##### ### # ### # # ######### ##### # #" + LS +
                                      "#+ + +#+ +#+#+ +#+ + + +#+#+ + + + +#+#+#" + LS +
                                      "# # ### ### ######### ### # # ######### #" + LS +
                                      "#+#+#+ +#+ + + + + +#+ + + +#+ +#+#+#+#+#" + LS +
                                      "# # ######### # ### ### # # # ### # # # #" + LS +
                                      "#+#+ + +#+#+#+#+#+#+#+ +#+#+#+ + + + +#+#" + LS +
                                      "##### # # # ##### ### ##### # ###########" + LS +
                                      "#+#+ +#+ + + +#+ + +#+ + +#+#+#+#+ + + +#" + LS +
                                      "# # ### ####### # ### ### # ### # ##### #" + LS +
                                      "#+ +#+ + +#+#+ +#+#+ + +#+#+ + + + + +#+#" + LS +
                                      "# # ### ### # # ########### ### # # #####" + LS +
                                      "#+#+#+ + + + +#+ + +#+#+#+#+#+ +#+#+ + +#" + LS +
                                      "### ### # ### # # # # # # # # # #########" + LS +
                                      "#+ + +#+#+ +#+#+#+#+ + + +#+#+#+ + + + +#" + LS +
                                      "# # # # # ### ############### # ### # # #" + LS +
                                      "#+#+#+#+#+#+ + + + + +#+ +#+#+#+ +#+#+#+#" + LS +
                                      "# ### ### ### ### # ### # # ### # # # # #" + LS +
                                      "#+#+ +#+ +#+ +#+ +#+ + +#+ + +#+#+#+#+#+#" + LS +
                                      "#########################################" + LS;


    public static final String MAZE_ODE = "###############" + LS +
                                      "#+#+ + +#+ +#+#" + LS +
                                      "# # ##### # # #" + LS +
                                      "#+#+#+#+ +#+#+#" + LS +
                                      "# # # # ##### #" + LS +
                                      "#+ +#+#+#+ + +#" + LS +
                                      "# ### # # #####" + LS +
                                      "#+ +#+ +#+#+ +#" + LS +
                                      "# ### # # # ###" + LS +
                                      "#+ + +#+ +#+ +#" + LS +
                                      "### ######### #" + LS +
                                      "#+ +#+#+ + + +#" + LS +
                                      "# ### # #######" + LS +
                                      "#+ + + + + + +#" + LS +
                                      "###############" + LS;

    public static final String MAZE_OPEN_ENDS = "###############" + LS +
                                                "#+#+ + + + +#+#" + LS +
                                                "# # # ### # # #" + LS +
                                                "#+#+#+#+ +#+#+#" + LS +
                                                "# # # # ### # #" + LS +
                                                "#+ +#+#+#+ + +#" + LS +
                                                "# ### # # #####" + LS +
                                                "#+ + + +#+#+ +#" + LS +
                                                "# ### # # # ###" + LS +
                                                "#+ + +#+ +#+ +#" + LS +
                                                "### # ####### #" + LS +
                                                "#+ +#+#+ + + +#" + LS +
                                                "# ### # #######" + LS +
                                                "#+ + + + + + +#" + LS +
                                                "###############" + LS;

    @Test(timeout = 10_000)
    public void solveAllCells() {
        final int height = 10;
        final int width = 10;
        Maze maze = Maze.generate(height, width);
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x)
                assertFalse(maze.shortestPath(new Cell(0, 0),
                                              new Cell(y, x))
                                .isEmpty());
        }
    }

    @Test(timeout = 10_000)
    public void solve1() {
        Maze maze = MazeParser.parse(ExampleMazes.MAZE0);
        assertEquals(0,
                     new PathSearcher().shortestPath(maze,
                                                     new Cell(0, 0),
                                                     new Cell(0, -1))
                                       .size());
    }

    @Test(timeout = 10_000)
    public void solve2() {
        Maze maze = MazeParser.parse(ExampleMazes.MAZE2);
        assertEquals(path(2, 2, 2, 3, 2, 4, 3, 4, 3, 5, 3, 6, 3, 7, 3, 8, 4, 8,
                          5, 8, 6, 8, 7, 8, 7, 7, 8, 7, 9, 7, 9, 8, 9, 9),
                     new PathSearcher().shortestPath(maze,
                                                     new Cell(2, 2),
                                                     new Cell(9, 9)));
    }

    @Test(timeout = 10_000)
    public void solve3() {
        Maze maze = MazeParser.parse(ExampleMazes.MAZE2_OPEN_ENDS);
        assertEquals(15,
                     new PathSearcher().shortestPath(maze,
                                                     new Cell(2, 2),
                                                     new Cell(9, 9))
                                       .size());
    }

    @Test(timeout = 10_000)
    public void solve4() {
        Maze maze = MazeParser.parse(ExampleMazes.EMPTY);
        assertEquals(0,
                     new PathSearcher().shortestPath(maze,
                                                     new Cell(0, 0),
                                                     new Cell(0, 1))
                                       .size());
    }

    @Test(timeout = 10_000)
    public void solve5() {
        Maze maze = MazeParser.parse(ExampleMazes.MAZE2);
        assertEquals(path(2, 2),
                     new PathSearcher().shortestPath(maze,
                                                     new Cell(2, 2),
                                                     new Cell(2, 2)));
    }

    @Test(timeout = 10_000)
    public void solve6() {
        Maze maze = Maze.generate(MAZE_HEIGHT, MAZE_WIDTH, MAZE_DET);
        assertEquals(MAZE, maze.toString());
        assertEquals(path(18, 0, 17, 0, 17, 1, 16, 1, 15, 1, 14, 1, 14, 2, 13, 2, 13, 1,
                          12, 1, 11, 1, 11, 0, 10, 0, 9, 0, 8, 0, 7, 0, 7, 1, 7, 2, 7, 3, 6, 3,
                          5, 3, 4, 3, 4, 4, 4, 5, 4, 6, 3, 6, 2, 6, 1, 6, 0, 6, 0, 7, 0, 8, 0,
                          9, 0, 10, 1, 10, 1, 11, 1, 12, 0, 12, 0, 13, 0, 14, 0, 15, 1, 15, 1,
                          16, 1, 17, 2, 17, 3, 17, 3, 18, 2, 18),
                     maze.shortestPath(new Cell(MAZE_HEIGHT - 2, 0),
                                       new Cell(2, MAZE_WIDTH - 2)));
    }

    @Test(timeout = 10_000)
    public void solve7() {
        Maze maze = MazeParser.parse(MAZE_ODE);
        maze.openDeadEnds();
        assertEquals(MAZE_OPEN_ENDS, maze.toString());
        assertEquals(13,
                     maze.shortestPath(new Cell(0, 0),
                                       new Cell(6, 6))
                         .size());
    }
}
